{"version":3,"sources":["hoc/Auxillary/Auxillary.js","hoc/Layout/Layout.js","axios-facerecognition.js","containers/RecognitionControls/RecognitionControls.js","containers/Admin/Admin.js","App.js","serviceWorker.js","index.js"],"names":["auxillary","props","children","Layout","state","showSideDrawer","sideDrawerClosedHandler","setState","sideDrawerToogleHandler","prevState","Auxillary","className","classes","Content","this","Component","instance","axios","create","baseURL","RecognitionControls","nom","photo","authorized","show","recognizeFace","get","then","response","console","log","data","img","catch","error","message","src","onClick","style","color","display","Admin","nameChangeHandler","event","name","target","fileSelectedHandler","files","fileUploadHandler","fd","FormData","append","post","mode","headers","withCredentials","credentials","htmlFor","type","id","placeholder","onChange","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.845bfe7d.chunk.js","sourcesContent":["const auxillary = (props) => props.children;\r\n\r\nexport default auxillary;","import React, { Component } from 'react';\r\nimport Auxillary from '../Auxillary/Auxillary'\r\nimport classes from './Layout.css'\r\n//import Toolbar from '../../components/Navigation/Toolbar/Toolbar'\r\n\r\nclass Layout extends Component {\r\n    state = {\r\n        showSideDrawer: false\r\n    }\r\n\r\n    sideDrawerClosedHandler = () => {\r\n        this.setState({showSideDrawer: false})\r\n    }\r\n\r\n    sideDrawerToogleHandler = () => {\r\n        this.setState((prevState) => {\r\n            return {showSideDrawer: !prevState.showSideDrawer}\r\n        });\r\n    }\r\n    render () {\r\n        return (\r\n            <Auxillary>\r\n                \r\n                <main className={classes.Content}>\r\n                    {this.props.children}\r\n                </main>\r\n            </Auxillary>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Layout;","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://192.168.0.16:5000/'\r\n})\r\n\r\nexport default instance","import React, { Component } from 'react';\r\nimport Auxillary from '../../hoc/Auxillary/Auxillary';\r\nimport axios from '../../axios-facerecognition';\r\n\r\n\r\nclass RecognitionControls extends Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.state = {...}\r\n    // }\r\n    state = {\r\n        nom: '',\r\n        photo: '',\r\n        authorized: false,\r\n        show: false\r\n    }\r\n\r\n    recognizeFace = () => {\r\n        axios.get( 'http://192.168.0.16:5000/' )\r\n        .then( response => {\r\n            //this.setState( { ingredients: response.data } );\r\n            console.log(response.data)\r\n            this.setState({nom: response.data.nom,\r\n                photo: response.data.img,\r\n                authorized: response.data.nom !==\"inconnu\", \r\n                show: true})\r\n            //console.log(this.state)\r\n        } )\r\n        .catch( error => {\r\n            console.log(error)\r\n            //this.setState( { error: true } );\r\n        } );\r\n    }\r\n\r\n    componentDidMount () {\r\n        /**/\r\n    }\r\n\r\n\r\n    render () {\r\n        let img = null\r\n        let message = this.state.authorized ? \"Acces autorisé\": \"Acces refusé\";\r\n        if (this.state.show){\r\n            img = (\r\n            <img className=\"col-8 justify-content-center\" src={\"data:image/png;base64,\" +  this.state.photo} />)\r\n        }\r\n        \r\n        return (\r\n            <Auxillary>\r\n                <div className=\"container\">\r\n                    <div className=\"row justify-content-center mt-5\">\r\n                        <h1 className=\"col col-6\">Démarrer la reconnaissance faciale</h1>\r\n                        <button className=\"btn btn-success col-4\" onClick={this.recognizeFace} >Scanne</button>\r\n                    </div> \r\n                    <div className=\"row justify-content-center mt-4\">\r\n                        <h1 className=\"col-6 col-sm-12 col-lg-6 offset-md-2\" style={{color: this.state.authorized? \"green\": \"red\",\r\n                                display: this.state.show? \"block\": \"none\"}}>\r\n                             {message} \r\n                             </h1>\r\n                            {img}\r\n                    </div>\r\n                    \r\n                </div>\r\n            </Auxillary>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RecognitionControls;\r\n","import React, { Component } from 'react';\r\nimport Auxillary from '../../hoc/Auxillary/Auxillary';\r\nimport axios from '../../axios-facerecognition';\r\n\r\n\r\nclass Admin extends Component {\r\n    \r\n    state = {\r\n        nom: 'moumouh',\r\n        photo: null\r\n    }\r\n\r\n    nameChangeHandler = (event) =>{\r\n        let name = event.target.data;\r\n        this.setState({\r\n            nom: name\r\n        })\r\n    }\r\n\r\n    fileSelectedHandler = event => {\r\n        console.log(event.target.files[0])\r\n        this.setState({\r\n            photo: event.target.files[0]\r\n        })\r\n    }\r\n\r\n    fileUploadHandler = () => {\r\n        const fd = new FormData();\r\n        fd.append('image', this.state.photo, this.state.photo.name)\r\n        fd.append('name', this.state.nom)\r\n        const data = {\r\n            name: 'moumouh',\r\n            img: fd\r\n        }\r\n        axios.post('http://192.168.0.16:5000/admin',fd, {\r\n            mode: 'no-cors',\r\n            headers: {\r\n              'Access-Control-Allow-Origin': '*',\r\n              'Content-Type': 'application/json'\r\n            },\r\n            withCredentials: true,\r\n            credentials: 'same-origin'\r\n            })\r\n            .then(response =>{\r\n                console.log(response)\r\n            })\r\n        \r\n    }\r\n\r\n\r\n    render () {\r\n        \r\n        return (\r\n            <Auxillary>\r\n                <div className=\"container\">\r\n                    <div className=\"row justify-content-center mt-5\">\r\n                        <div className=\"container\">\r\n                        <h1>Ajouter une personne</h1>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"nom\">Nom de la personne</label>\r\n                            <input type=\"text\" className=\"form-control form-control-lg\" id=\"nom\" placeholder=\"\"/>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"photo\">Photo de la personne</label>\r\n                            <input type=\"file\" className=\"form-control-file\" id=\"photo\" onChange={this.fileSelectedHandler}/>\r\n                        </div>\r\n                        <button className=\"btn btn-success col-4\" onClick={this.fileUploadHandler} >Ajouter</button>\r\n                        </div>\r\n                    </div> \r\n                    \r\n                    \r\n                </div>\r\n            </Auxillary>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Admin;\r\n","import React, { Component } from 'react';\nimport Layout from './hoc/Layout/Layout'\nimport RecognitionControls from './containers/RecognitionControls/RecognitionControls';\nimport Admin from './containers/Admin/Admin'\nimport { Switch, Route } from 'react-router-dom';\n\nclass App extends Component {\n  render() {\n    return (\n      <div >\n        <Layout>\n          <Switch>\n          <Route path=\"/\" exact component={RecognitionControls} />\n          <Route path=\"/admin\" exact component={Admin} />\n          </Switch>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}